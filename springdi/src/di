[IoC의 유형]
1.  DL(dependency lookup)
	:컨테이너가 제공하는 메소드를 통해서 객체를 spring 컨테이너로 부터 찾아와서 사용
	-------------------- ---> getBean
	
2.  DI(dependency Injection)
	:개발자가 직접 코드 구현을 통해서 스프링 컨테이너로 부터 객체를 받아오는 DL과 다르게 spring 내부에서
	 내 클래스에서 사용하는 객체를 자동으로 mapping시켜주는 것을 의미
	 ApplicationContext(스프링컨테이너)객체가 생성될때 자동으로 DI가 처리된다.	
	 이를 위해서 개발자는 설정 파일에 생성할 객체와 어떤 방법으로 어떤 객체를 주입할 것인지 명시를 해야 한다.
	 클래스에는 명시한 방법에 따라서 객체를 주입받을 수 있도록 setter메소드나 생성자를 미리 정의해야 한다.
	 (늘 하던 방법으로 새로운 방법이 아니다. - 정의하는 방법은 우리가 알고 있는 방법과 동일)
	 
	 1) Constructor Injection : 생성자를 통해서 객체를 주입받는 방법
	 	- 클래스 내부에서 필요한 객체를 생성자를 통해 전달받을 수 있도록 미리 생성자를 정의
	 	- 정의한 생성자를 보면서 컨테이너가 객체를 만들 수 있도록 설정파일에 등록
	 	- oop특성이 적용되어 있는 상태
	 	- 생성될 클래스, 주입받을 클래스를 생성자에 정의
	 	  특히, 주입받을 클래스에너느 반드시 매개변수가 있는 생성자가 정의되어 있어야 한다.
	 	- xml설정 파일에 생성자 방식으로 객체를 전달할 수 있도록 <construtor-arg>가 <bean>태그 내부에 정의되어 있어야 한다.
	 	- <constructior-arg>태그의 갯수가 생성자 매개변수 갯수와 동일
	 	
	 2) setter injection
	 	- setter메소드를 통해서 객체를 주입받는 방식으로 기본은 무조건 기본생성자를 호출한다.
	 										  ------------------------ ----> <constructor-arg>엘리먼트가 없으면 무조건 기본생성자
	 										  
	 	- 컨테이너에 의해서 만들어질 객체는 기본생성자가 정의되어 있어야 한다.
	 	- setter메소드를 호출할 수 있도록 정의해야 한다.
	 	- 설정파일에 <property>태그를 이용해서 객체를 전달받을 수 있도록 정의
	 	
	 3)  
	 
	 