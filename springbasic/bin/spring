1.  프레임워크 개요
2.  스프링의 특징
	-  경량의 시스템(라이브러리 하나가 1MB 안되거나 조금 넘는것들이 대부분)
	-  POJO(Plain Old Java Object)기반으로 시스템을 개발
	=>  기존에 사용하던 자바 클래스를 그대로 사용해서 만들어진클래스를 이용해서 개발
	-  IoC(Inversion of Control)컨테이너를 제공
	   객체를 lifecycle을 관리하는 컴포넌트
	   1) 의존성 주입
		  시스템 내부에서 사용하는 객체를 생성하고 소멸하고 사용하는 곳에 전달해주는 역할을 담당하는 컴포넌트가 프레임워크 내부에
		  있으며 이를 스프링컨테이너(IoC컨테이너)라 한다.
		  이를 통해서 내가 사용하는 객체를 전달받아서 사용한다.
		  이런 기능을 담당하는 클래스들이 있다.
			
	   2) 스프링 내부에서 지원하는 IoC컨테이너를 이용해서 커플링을 낮게 만들 수 있다.
	   3) 스프링은 결합도를 낮추기 위해서 객체에 대한 모든 생성을 코드에서 직접 new하지 않고 프레임워크 내부에서 컨테이너가 관리하도록 한다.
	   							 ----------------  ---> API를 뺀 내가 만든 클래스 or 외부에서 구매한 모듈
	   
3. 스프링 컨테이너
	BeanFactory			--> Application
		^
		l
ApplicationContext		--> Application
		^
		l
WebApplicationContext	--> web

1)  BeanFactory
	=>  getBean이 호출되면 객체를 생성해서 넘긴다.
		getBean호출되면 전달한 id에 해당하는 객체만 생성한다.
		따라서 사용되지 않는 빈에 오류가 있다고 하더라도 에러 메세지를 띄우지 않는다.
		
		
2)  ApplicationContext
	=>  컨테이너객체가 생성될때 등록된 xml문서에 정의된 모든 bean을 생성해서 컨테이너 내부에 존재하는 map형태의 자료구조에 저장한다.
		이때 빈과 빈 사이에 관계가 설정되어 있다면 이 관계도 모두 셋팅한 후 객체를 저장
		따라서 사용되지 않는 빈에 오류가 있으면 오류를 발생시킨다.


4.  객체사용하기
	1) DL(Dependency Lookup)
	   - 컨테이너가 제공하는 메소드를 통해서 객체를 스프링컨테이너로 부터 가져오는 작업
	   									-------------------------
	   									getBean(설정파일에 정의한 id명)
	2) DI(Dependency Injection)